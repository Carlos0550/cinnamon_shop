import 'dotenv/config';
import { PrismaClient, ProductState } from '@prisma/client';

const prisma = new PrismaClient();

// Datos de ejemplo para generar productos aleatorios
const productTitles = [
  // Maquillaje
  'Base de Maquillaje L√≠quida', 'Corrector Cremoso', 'Polvo Compacto Matificante', 'Rubor en Polvo',
  'Bronceador Natural', 'Iluminador Dorado', 'Sombras de Ojos Paleta', 'Delineador de Ojos L√≠quido',
  'M√°scara de Pesta√±as Volumen', 'L√°piz de Cejas', 'Labial Mate', 'Gloss Labial Brillante',
  'Primer Facial', 'Fijador de Maquillaje', 'Contorno en Crema', 'Tinta para Labios',
  
  // Cuidado de la piel
  'Limpiador Facial Suave', 'T√≥nico Hidratante', 'Serum Vitamina C', 'Crema Hidratante Facial',
  'Protector Solar SPF 50', 'Exfoliante Facial', 'Mascarilla Hidratante', 'Contorno de Ojos',
  'Agua Micelar', 'Aceite Desmaquillante', 'Crema Nocturna Reparadora', 'Serum √Åcido Hialur√≥nico',
  
  // Accesorios
  'Set de Brochas Profesionales', 'Esponja de Maquillaje', 'Espejo Compacto con Luz', 'Organizador de Maquillaje',
  'Rizador de Pesta√±as', 'Pinzas para Cejas', 'Aplicadores de Sombras', 'Limpiador de Brochas',
  'Bolsa de Maquillaje Viaje', 'Soporte para Brochas', 'Paleta Mezcladora', 'Atomizador Facial',
  
  // Fragancias
  'Perfume Floral Femenino', 'Eau de Toilette Fresco', 'Body Splash Frutal', 'Perfume Amaderado',
  'Fragancia C√≠trica', 'Perfume Oriental', 'Colonia Suave', 'Bruma Corporal Arom√°tica',
  
  // Cuidado corporal
  'Crema Corporal Hidratante', 'Exfoliante Corporal', 'Aceite Corporal Nutritivo', 'Loci√≥n Post-Solar',
  'Gel de Ducha Arom√°tico', 'Manteca Corporal', 'Crema para Manos', 'B√°lsamo Labial Hidratante',
  
  // U√±as
  'Esmalte de U√±as Cl√°sico', 'Base Fortalecedora', 'Top Coat Brillante', 'Removedor de Esmalte',
  'Lima de U√±as Profesional', 'Aceite para Cut√≠culas', 'Kit de Manicura', 'Esmalte Gel UV',
  
  // Cabello
  'Shampoo Hidratante', 'Acondicionador Reparador', 'Mascarilla Capilar', 'Serum Anti-Frizz',
  'Spray Termoprotector', 'Aceite Capilar Nutritivo', 'Champ√∫ Seco', 'Tratamiento Capilar Intensivo'
];

const descriptions = [
  'Producto de alta calidad con f√≥rmula innovadora que brinda resultados excepcionales.',
  'Ideal para uso diario, proporciona hidrataci√≥n y protecci√≥n duradera.',
  'F√≥rmula libre de parabenos y sulfatos, perfecta para pieles sensibles.',
  'Textura ligera y de r√°pida absorci√≥n, no deja residuos grasos.',
  'Enriquecido con ingredientes naturales y vitaminas esenciales.',
  'Producto dermatol√≥gicamente testado, hipoalerg√©nico y no comedog√©nico.',
  'F√≥rmula de larga duraci√≥n que mantiene su efecto durante todo el d√≠a.',
  'Ingredientes premium seleccionados para m√°xima eficacia y suavidad.',
  'Producto vegano y cruelty-free, respetuoso con el medio ambiente.',
  'Tecnolog√≠a avanzada que se adapta a las necesidades de tu piel.',
  'F√≥rmula multifuncional que combina varios beneficios en un solo producto.',
  'Textura cremosa y sedosa que se desliza suavemente sobre la piel.',
  'Producto profesional utilizado por maquilladores expertos.',
  'F√≥rmula resistente al agua y al sudor, perfecta para cualquier ocasi√≥n.',
  'Ingredientes activos que nutren y regeneran la piel desde el interior.'
];

const tags = [
  ['hidratante', 'natural', 'vegano'],
  ['larga duraci√≥n', 'resistente al agua', 'profesional'],
  ['anti-edad', 'nutritivo', 'reparador'],
  ['matificante', 'oil-free', 'piel grasa'],
  ['sensible', 'hipoalerg√©nico', 'suave'],
  ['luminoso', 'iluminador', 'radiante'],
  ['volumen', 'definici√≥n', 'intenso'],
  ['cremoso', 'sedoso', 'confortable'],
  ['org√°nico', 'eco-friendly', 'sostenible'],
  ['multifuncional', 'todo-en-uno', 'pr√°ctico']
];

// Funci√≥n para obtener un elemento aleatorio de un array
function getRandomElement<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)];
}

// Funci√≥n para obtener m√∫ltiples elementos aleatorios √∫nicos
function getRandomElements<T>(array: T[], count: number): T[] {
  const shuffled = [...array].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, count);
}

// Funci√≥n para generar precio aleatorio
function generateRandomPrice(): number {
  const prices = [9.99, 14.99, 19.99, 24.99, 29.99, 34.99, 39.99, 44.99, 49.99, 59.99, 69.99, 79.99, 89.99, 99.99];
  return getRandomElement(prices);
}

// Funci√≥n para generar stock aleatorio
function generateRandomStock(): number {
  return Math.floor(Math.random() * 100) + 1; // Entre 1 y 100
}

// Funci√≥n para generar estado aleatorio (mayor√≠a activos)
function generateRandomState(): ProductState {
  const states = [
    ProductState.active, ProductState.active, ProductState.active, ProductState.active, // 80% activos
    ProductState.active, ProductState.active, ProductState.active, ProductState.active,
    ProductState.draft, ProductState.out_stock // 20% otros estados
  ];
  return getRandomElement(states);
}

async function seedProducts() {
  try {
    console.log('üîç Consultando categor√≠as existentes...');
    
    // Obtener todas las categor√≠as activas
    const categories = await prisma.categories.findMany({
      where: {
        is_active: true
      },
      select: {
        id: true,
        title: true
      }
    });

    if (categories.length === 0) {
      console.log('‚ùå No se encontraron categor√≠as activas en la base de datos.');
      console.log('üí° Primero debes crear algunas categor√≠as antes de generar productos.');
      return;
    }

    console.log(`‚úÖ Se encontraron ${categories.length} categor√≠as:`);
    categories.forEach(cat => console.log(`   - ${cat.title} (ID: ${cat.id})`));

    console.log('\nüöÄ Generando 100 productos aleatorios...');

    const products = [];
    
    for (let i = 0; i < 100; i++) {
      const randomCategory = getRandomElement(categories);
      const randomTitle = getRandomElement(productTitles);
      const randomDescription = getRandomElement(descriptions);
      const randomTags = getRandomElements(getRandomElement(tags), Math.floor(Math.random() * 3) + 1);
      const randomPrice = generateRandomPrice();
      const randomStock = generateRandomStock();
      const randomState = generateRandomState();

      const product = {
        title: `${randomTitle} ${i + 1}`,
        description: randomDescription,
        price: randomPrice,
        stock: randomStock,
        state: randomState,
        categoryId: randomCategory.id,
        tags: randomTags,
        images: [], // Sin im√°genes por defecto
        is_active: randomState === ProductState.active || randomState === ProductState.draft
      };

      products.push(product);
    }

    // Insertar productos en lotes para mejor rendimiento
    console.log('üíæ Insertando productos en la base de datos...');
    
    const batchSize = 10;
    let insertedCount = 0;

    for (let i = 0; i < products.length; i += batchSize) {
      const batch = products.slice(i, i + batchSize);
      
      await prisma.products.createMany({
        data: batch
      });
      
      insertedCount += batch.length;
      console.log(`   ‚úÖ Insertados ${insertedCount}/${products.length} productos`);
    }

    console.log('\nüéâ ¬°Proceso completado exitosamente!');
    console.log(`üìä Resumen:`);
    console.log(`   - Productos creados: ${insertedCount}`);
    console.log(`   - Categor√≠as utilizadas: ${categories.length}`);
    
    // Mostrar estad√≠sticas por categor√≠a
    console.log('\nüìà Distribuci√≥n por categor√≠a:');
    for (const category of categories) {
      const count = products.filter(p => p.categoryId === category.id).length;
      console.log(`   - ${category.title}: ${count} productos`);
    }

    // Mostrar estad√≠sticas por estado
    console.log('\nüìä Distribuci√≥n por estado:');
    const stateStats = products.reduce((acc, product) => {
      acc[product.state] = (acc[product.state] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    Object.entries(stateStats).forEach(([state, count]) => {
      console.log(`   - ${state}: ${count} productos`);
    });

  } catch (error) {
    console.error('‚ùå Error al generar productos:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar el script
if (require.main === module) {
  seedProducts();
}

export { seedProducts };